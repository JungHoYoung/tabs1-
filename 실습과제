Ex5_1.c 실습

#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>

int main(void){
	struct stat buf;	//파일 정보를 읽어오는 함수 실행(stat 구조체)

	stat("unix.txt", &buf); 	//unix.txt를 읽어옴
	printf("Mode = %o (16진수: %x)\n", (unsigned int)buf.st_mode, (unsigned int)buf.st_mode);		//Mode를 8진수로, 16진수로 표현

	if((buf.st_mode & S_IREAD) != 0)		//만약 모드가 소유자의 읽기권한이 있다면
		printf("unix.txt : user has a read permission\n");	//권한이 있다고 출력

	if((buf.st_mode & (S_IREAD >> 3)) !=0)		//만약 모드가 자오른쪽 shift 연산자를 이용해 그룹에게 읽기권한이 있다면
		printf("unix.txt : group has a read permission\n");	//권한이 있다고 출력

	if((buf.st_mode & S_IROTH) != 0)		//만약 모드가 기타사용자에게 읽기권한이 있다면
		printf("unix.txt : other have a read permission\n"); //권한이 있다고 출력

	return 0;
}


 ex5_2.c 실습

#include<sys/errno.h>
#include<unistd.h>
#include<stdio.h>

extern int errno;		//오류원인을 알기위해 errno.h 인자 사용

int main(void){
	int per;

	if (access("unix.bak", F_OK) == -1 && errno == ENOENT)	//unix.bak파일에 실행권한을 가지고 unix.bak이 존재하고 파일이 없다면
		printf("unix.bak: File not exist.\n");		//unix.bak파일이 없음을 출력

	per =access("unix.txt", R_OK);				//unix.txt파일에 읽기권한을 확인하고 접근권한을 가지는 per 선언
	if(per == 0)		//per에 접근권한이 있다면 (==0)
		printf("unix.txt: Read permission is permitted.\n");	//있음을 출력
	else if(per == -1 && errno == EACCES)	//접근권한이 없고(=-1) 오류메세지로 접근권한이 없다면
		printf("unix.txt: Read permission is not permitted.\n");	//없음을 출력

	return 0;

}

 ex5_3.c 실습

#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>

int main(void){
	struct stat buf;

	chmod("unix.txt", S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH);
	stat("unixt.txt", &buf);
	printf("1.Mode = %o\n", (unsigned int)buf.st_mode);

	buf.st_mode |= S_IWGRP;
	buf.st_mode &= ~(S_IROTH);
	chmod("unix.txt", buf.st_mode);
	stat("unix.txt", &buf);
	printf("2.Mode =%o\n", (unsigned int)buf.st_mode);

	return 0;
}
